<Project>
  <PropertyGroup>
    <!-- Common properties for all projects -->
    <TargetFramework>net9.0</TargetFramework>
    <LangVersion>13</LangVersion>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    
    <!-- AOT Configuration -->
    <IsAotCompatible>true</IsAotCompatible>
    <EnableTrimAnalyzer>true</EnableTrimAnalyzer>
    <EnableSingleFileAnalyzer>true</EnableSingleFileAnalyzer>
    <EnableAotAnalyzer>true</EnableAotAnalyzer>
    
    <!-- Enable style analyzers for clean code -->
    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
    <RunAnalyzersDuringBuild>true</RunAnalyzersDuringBuild>
    <RunAnalyzersDuringLiveAnalysis>true</RunAnalyzersDuringLiveAnalysis>
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
    <AnalysisLevel>latest-recommended</AnalysisLevel>
    
    <!-- Build output -->
    <BaseIntermediateOutputPath>$(MSBuildThisFileDirectory)artifacts\obj\$(MSBuildProjectName)\</BaseIntermediateOutputPath>
    <BaseOutputPath>$(MSBuildThisFileDirectory)artifacts\bin\$(MSBuildProjectName)\</BaseOutputPath>
    
    <!-- NuGet package properties -->
    <Authors>Michael Ivertowski</Authors>
    <Company>DotCompute</Company>
    <Product>DotCompute - Universal Compute Framework</Product>
    <Description>A high-performance, Native AOT-compatible universal compute framework for .NET 9+ with CPU and GPU acceleration support.</Description>
    <Copyright>Copyright (c) 2025 Michael Ivertowski. All rights reserved.</Copyright>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/mivertowski/DotCompute</PackageProjectUrl>
    <RepositoryUrl>https://github.com/mivertowski/DotCompute.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageTags>compute;gpu;cuda;opencl;metal;simd;native-aot;performance;parallel;dotnet</PackageTags>
    <PackageReleaseNotes>Alpha Release v0.1.0-alpha.1: Production-ready CPU backend with 23x speedups, 90% complete CUDA backend, comprehensive testing with 90% coverage.</PackageReleaseNotes>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    
    <!-- Versioning -->
    <VersionPrefix>0.1.0</VersionPrefix>
    <VersionSuffix>alpha.1</VersionSuffix>
    
    <!-- Strong naming - Disabled for development -->
    <SignAssembly>false</SignAssembly>
    <!-- <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)DotCompute.snk</AssemblyOriginatorKeyFile> -->
    <!-- <PublicSign Condition="'$(OS)' != 'Windows_NT'">true</PublicSign> -->
    
    <!-- Deterministic builds -->
    <Deterministic>true</Deterministic>
    <ContinuousIntegrationBuild Condition="'$(CI)' == 'true'">true</ContinuousIntegrationBuild>
    
    <!-- Source Link -->
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    
    <!-- Test filtering and coverage configuration -->
    <IsTestProject Condition="$(MSBuildProjectName.EndsWith('.Tests')) Or $(MSBuildProjectName.Contains('.Test.'))">true</IsTestProject>
    <GenerateDocumentationFile Condition="'$(IsTestProject)' != 'true'">true</GenerateDocumentationFile>
    
    <!-- Coverage thresholds -->
    <CoverageThreshold Condition="'$(CoverageThreshold)' == ''">80</CoverageThreshold>
    <UnitTestCoverageThreshold Condition="'$(UnitTestCoverageThreshold)' == ''">85</UnitTestCoverageThreshold>
    <IntegrationTestCoverageThreshold Condition="'$(IntegrationTestCoverageThreshold)' == ''">70</IntegrationTestCoverageThreshold>
    
    <!-- Test categories import -->
    <ImportTestCategories Condition="'$(IsTestProject)' == 'true'">true</ImportTestCategories>
  </PropertyGroup>
  
  <!-- Test project specific configuration -->
  <PropertyGroup Condition="'$(IsTestProject)' == 'true'">
    <IsPackable>false</IsPackable>
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);1591</NoWarn> <!-- Suppress XML documentation warnings in tests -->
    
    <!-- Test runner configuration -->
    <VSTestLogger Condition="'$(VSTestLogger)' == ''">trx</VSTestLogger>
    <VSTestResultsDirectory Condition="'$(VSTestResultsDirectory)' == ''">$(MSBuildThisFileDirectory)TestResults</VSTestResultsDirectory>
    <CollectCoverage Condition="'$(CollectCoverage)' == ''">true</CollectCoverage>
    <CoverletOutput>$(VSTestResultsDirectory)/Coverage/</CoverletOutput>
    <CoverletOutputFormat>opencover</CoverletOutputFormat>
    
    <!-- Test timeout configuration -->
    <TestTimeout Condition="'$(TestTimeout)' == ''">300000</TestTimeout> <!-- 5 minutes -->
    <LongRunningTestTimeout Condition="'$(LongRunningTestTimeout)' == ''">600000</LongRunningTestTimeout> <!-- 10 minutes -->
  </PropertyGroup>

  <ItemGroup>
    <!-- Source Link -->
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="8.0.0" PrivateAssets="All"/>
    <!-- Fix ILLink.Tasks version globally -->
    <PackageReference Include="Microsoft.NET.ILLink.Tasks" Version="9.0.8" />
  </ItemGroup>
  
  <!-- Test project dependencies are handled by individual test projects and tests/Directory.Build.targets -->
  
  <!-- Import test categories for test projects -->
  <Import Project="$(MSBuildThisFileDirectory)tests/test-categories.props" Condition="'$(IsTestProject)' == 'true' And Exists('$(MSBuildThisFileDirectory)tests/test-categories.props')" />
  
  <!-- MSBuild targets for test execution -->
  <Target Name="RunCITests" Condition="'$(CI)' == 'true'">
    <Message Text="Running CI-compatible tests (excluding hardware-dependent tests)" Importance="high" />
    <Exec Command="dotnet test --configuration $(Configuration) --filter &quot;Category!=Hardware&amp;Category!=GPU&amp;Category!=CUDA&amp;Category!=OpenCL&amp;Category!=DirectCompute&amp;Category!=Metal&quot; --logger trx --collect:&quot;XPlat Code Coverage&quot;" />
  </Target>
  
  <Target Name="RunAllTests">
    <Message Text="Running all tests including hardware-dependent tests" Importance="high" />
    <Exec Command="dotnet test --configuration $(Configuration) --logger trx --collect:&quot;XPlat Code Coverage&quot;" />
  </Target>
  
  <Target Name="CheckCoverage" DependsOnTargets="RunCITests" Condition="'$(CollectCoverage)' == 'true'">
    <Message Text="Checking code coverage against threshold: $(CoverageThreshold)%" Importance="high" />
    <!-- Coverage validation would be implemented here -->
  </Target>
</Project>
