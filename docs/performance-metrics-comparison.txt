╔══════════════════════════════════════════════════════════════════════════════╗
║            PERFORMANCE METRICS TYPE COMPARISON - VISUAL CHART               ║
╚══════════════════════════════════════════════════════════════════════════════╝

┌──────────────────────────────────────────────────────────────────────────────┐
│ TYPE INVENTORY (7 Total)                                                    │
├──────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│ 1. ✅ CANONICAL (RECOMMENDED)                                                │
│    DotCompute.Abstractions.Performance.PerformanceMetrics                   │
│    📄 src/Core/DotCompute.Abstractions/Performance/PerformanceMetrics.cs    │
│    📊 Properties: 22                                                         │
│    🔧 Type: sealed class                                                     │
│    ⭐ Features: Factory methods, aggregation, extensibility                  │
│                                                                              │
│ 2. ❌ DEBUGGING DUPLICATE (TO BE REMOVED)                                    │
│    DotCompute.Abstractions.Debugging.PerformanceMetrics                     │
│    📄 src/Core/DotCompute.Abstractions/Debugging/IKernelDebugService.cs:153 │
│    📊 Properties: 9 (5 unique + 4 compatibility)                            │
│    🔧 Type: class (nested in interface)                                     │
│    ⚠️  Issue: Duplicate with compatibility layer                            │
│                                                                              │
│ 3. ✅ SPECIALIZED TYPES (KEEP)                                               │
│    ├─ TelemetryPerformanceMetrics (Telemetry ops/errors)                   │
│    ├─ BufferPerformanceMetrics (Buffer transfers - record type)            │
│    ├─ KernelPerformanceMetrics (CPU SIMD/cache metrics)                    │
│    └─ AggregatedPerformanceMetrics (Runtime aggregation)                   │
│                                                                              │
│ 4. 🔄 TYPE ALIAS (ALREADY MIGRATED)                                         │
│    DotCompute.Backends.CUDA.Types.PerformanceMetrics                        │
│    📄 Intentionally empty - uses canonical                                   │
└──────────────────────────────────────────────────────────────────────────────┘


┌──────────────────────────────────────────────────────────────────────────────┐
│ PROPERTY COMPARISON: Canonical (22) vs Debugging (9)                        │
├──────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│ TIMING PROPERTIES                                                            │
│ ┌────────────────────────────────┬──────────┬──────────┐                   │
│ │ Property                       │ Canon    │ Debug    │                   │
│ ├────────────────────────────────┼──────────┼──────────┤                   │
│ │ ExecutionTimeMs                │ ✅ long  │ ✅ comp  │                   │
│ │ ExecutionTime (TimeSpan)       │ ❌       │ ✅       │                   │
│ │ KernelExecutionTimeMs          │ ✅       │ ❌       │                   │
│ │ MemoryTransferTimeMs           │ ✅       │ ❌       │                   │
│ │ TotalExecutionTimeMs           │ ✅       │ ❌       │                   │
│ │ AverageTimeMs                  │ ✅       │ ❌       │                   │
│ │ MinTimeMs                      │ ✅       │ ❌       │                   │
│ │ MaxTimeMs                      │ ✅       │ ❌       │                   │
│ │ StandardDeviation              │ ✅       │ ❌       │                   │
│ └────────────────────────────────┴──────────┴──────────┘                   │
│                                                                              │
│ MEMORY PROPERTIES                                                            │
│ ┌────────────────────────────────┬──────────┬──────────┐                   │
│ │ MemoryUsageBytes               │ ✅       │ ✅ alias │                   │
│ │ PeakMemoryUsageBytes           │ ✅       │ ❌       │                   │
│ └────────────────────────────────┴──────────┴──────────┘                   │
│                                                                              │
│ UTILIZATION PROPERTIES                                                       │
│ ┌────────────────────────────────┬──────────┬──────────┐                   │
│ │ ComputeUtilization             │ ✅       │ ❌       │                   │
│ │ MemoryUtilization              │ ✅       │ ❌       │                   │
│ │ CpuUtilization                 │ ❌       │ ✅ float │                   │
│ │ GpuUtilization                 │ ❌       │ ✅ float │                   │
│ │ CacheHitRate                   │ ✅       │ ❌       │                   │
│ └────────────────────────────────┴──────────┴──────────┘                   │
│                                                                              │
│ THROUGHPUT PROPERTIES                                                        │
│ ┌────────────────────────────────┬──────────┬──────────┐                   │
│ │ ThroughputGBps                 │ ✅       │ ❌       │                   │
│ │ OperationsPerSecond            │ ✅       │ ✅ alias │                   │
│ │ TotalFlops                     │ ✅       │ ❌       │                   │
│ └────────────────────────────────┴──────────┴──────────┘                   │
│                                                                              │
│ METADATA PROPERTIES                                                          │
│ ┌────────────────────────────────┬──────────┬──────────┐                   │
│ │ Operation (string)             │ ✅       │ ❌       │                   │
│ │ CallCount                      │ ✅       │ ❌       │                   │
│ │ Timestamp                      │ ✅       │ ❌       │                   │
│ │ CustomMetrics (Dictionary)     │ ✅       │ ❌       │                   │
│ │ ErrorMessage                   │ ✅       │ ❌       │                   │
│ │ IsSuccessful (computed)        │ ✅       │ ❌       │                   │
│ └────────────────────────────────┴──────────┴──────────┘                   │
│                                                                              │
│ LEGEND: ✅ = Has property  ❌ = Missing  comp/alias = Compatibility layer    │
└──────────────────────────────────────────────────────────────────────────────┘


┌──────────────────────────────────────────────────────────────────────────────┐
│ USAGE ANALYSIS                                                               │
├──────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│ CANONICAL TYPE USERS (5+ files):                                            │
│ ✅ src/Core/DotCompute.Core/Optimization/PerformanceOptimizedOrchestrator.cs│
│ ✅ src/Backends/DotCompute.Backends.CPU/CpuKernelOptimizer.cs               │
│ ✅ src/Backends/DotCompute.Backends.CPU/CpuKernelCache.cs                   │
│ ✅ src/Backends/DotCompute.Backends.Metal/MetalAccelerator.cs               │
│ ✅ src/Core/DotCompute.Core/Debugging/Analytics/KernelDebugAnalyzer.cs      │
│                                                                              │
│ DEBUGGING TYPE USERS (3 files):                                             │
│ ⚠️  src/Core/DotCompute.Core/Debugging/KernelDebugProfiler.cs (type alias)  │
│ ⚠️  src/Backends/DotCompute.Backends.CPU/CpuCompiledKernel.cs               │
│ ⚠️  src/Backends/DotCompute.Backends.CPU/CpuKernelExecutor.cs               │
│                                                                              │
│ CONFLICT FILE:                                                               │
│ 🔥 KernelDebugProfiler.cs uses BOTH namespaces with explicit alias          │
│    using DotCompute.Abstractions.Performance;                               │
│    using DotCompute.Abstractions.Debugging;                                 │
│    using PerformanceMetrics = DotCompute.Abstractions.Debugging...          │
└──────────────────────────────────────────────────────────────────────────────┘


┌──────────────────────────────────────────────────────────────────────────────┐
│ CONSOLIDATION PLAN                                                           │
├──────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│ STRATEGY: Remove debugging duplicate, use canonical everywhere              │
│                                                                              │
│ PHASE 1: Update Interface Definition                                        │
│ 📄 src/Core/DotCompute.Abstractions/Debugging/IKernelDebugService.cs        │
│    ├─ Add: using DotCompute.Abstractions.Performance;                       │
│    └─ Delete: Nested PerformanceMetrics class (lines 153-166)               │
│                                                                              │
│ PHASE 2: Update KernelDebugProfiler                                         │
│ 📄 src/Core/DotCompute.Core/Debugging/KernelDebugProfiler.cs                │
│    └─ Remove: Type alias (line 13)                                          │
│                                                                              │
│ PHASE 3: Update CPU Backend                                                 │
│ 📄 src/Backends/DotCompute.Backends.CPU/CpuCompiledKernel.cs                │
│ 📄 src/Backends/DotCompute.Backends.CPU/CpuKernelExecutor.cs                │
│    ├─ Change: using DotCompute.Abstractions.Debugging                       │
│    └─ To:     using DotCompute.Abstractions.Performance                     │
│                                                                              │
│ PHASE 4: Verify Integration                                                 │
│    ├─ Run all debugging tests                                               │
│    ├─ Run performance monitoring tests                                      │
│    ├─ Verify compilation                                                    │
│    └─ Check benchmark consistency                                           │
└──────────────────────────────────────────────────────────────────────────────┘


┌──────────────────────────────────────────────────────────────────────────────┐
│ MIGRATION HELPER                                                             │
├──────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│ OLD CODE (Debugging type):                                                  │
│ ╔════════════════════════════════════════════════════════════════════════╗  │
│ ║ var metrics = new PerformanceMetrics                                   ║  │
│ ║ {                                                                      ║  │
│ ║     ExecutionTime = stopwatch.Elapsed,                                ║  │
│ ║     MemoryUsage = memoryBytes,                                        ║  │
│ ║     CpuUtilization = cpuPercent,                                      ║  │
│ ║     GpuUtilization = gpuPercent                                       ║  │
│ ║ };                                                                     ║  │
│ ╚════════════════════════════════════════════════════════════════════════╝  │
│                                                                              │
│ NEW CODE (Canonical type):                                                  │
│ ╔════════════════════════════════════════════════════════════════════════╗  │
│ ║ var metrics = PerformanceMetrics.FromStopwatch(                       ║  │
│ ║     stopwatch,                                                        ║  │
│ ║     operation: "kernel-execution"                                     ║  │
│ ║ );                                                                     ║  │
│ ║ metrics.MemoryUsageBytes = memoryBytes;                               ║  │
│ ║ metrics.ComputeUtilization = cpuPercent; // or gpuPercent             ║  │
│ ╚════════════════════════════════════════════════════════════════════════╝  │
└──────────────────────────────────────────────────────────────────────────────┘


┌──────────────────────────────────────────────────────────────────────────────┐
│ RISK ASSESSMENT                                                              │
├──────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│ ✅ LOW RISK                                                                  │
│    • Only 3 files use debugging type                                        │
│    • Specialized types are independent                                      │
│    • Most code already uses canonical                                       │
│    • CUDA backend completed migration                                       │
│                                                                              │
│ ⚠️  MEDIUM RISK                                                              │
│    • Debugging service behavior verification needed                         │
│    • Performance monitoring integration                                     │
│    • Test backward compatibility                                            │
│                                                                              │
│ ❌ HIGH RISK                                                                 │
│    • None identified                                                         │
└──────────────────────────────────────────────────────────────────────────────┘


┌──────────────────────────────────────────────────────────────────────────────┐
│ EXPECTED BENEFITS                                                            │
├──────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│ ✨ Single source of truth for performance metrics                           │
│ ✨ Better extensibility via CustomMetrics dictionary                        │
│ ✨ Richer statistical analysis (StdDev, Min/Max/Avg)                        │
│ ✨ Consistent API across all components                                     │
│ ✨ Factory methods for common scenarios                                     │
│ ✨ Error tracking built-in (ErrorMessage, IsSuccessful)                     │
│ ✨ Timestamp tracking for performance history                               │
│ ✨ Aggregation support for multi-operation analysis                         │
└──────────────────────────────────────────────────────────────────────────────┘


┌──────────────────────────────────────────────────────────────────────────────┐
│ RECOMMENDATION                                                               │
├──────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│ 🎯 PROCEED WITH CONSOLIDATION                                               │
│                                                                              │
│ Timeline:    1-2 hours (implementation + testing)                           │
│ Files:       5 files to modify                                              │
│ Tests:       Run full debugging + performance test suites                   │
│ Confidence:  HIGH ✅                                                         │
│                                                                              │
│ Next Steps:                                                                  │
│ 1. Await coordinator approval                                               │
│ 2. Execute Phase 1-4 migration                                              │
│ 3. Run test suite                                                            │
│ 4. Document changes in CHANGELOG                                            │
└──────────────────────────────────────────────────────────────────────────────┘

╔══════════════════════════════════════════════════════════════════════════════╗
║                     ANALYSIS COMPLETE - READY FOR ACTION                     ║
╚══════════════════════════════════════════════════════════════════════════════╝
