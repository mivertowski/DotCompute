name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  CI: true
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  # ================================================================
  # BUILD AND TEST
  # ================================================================
  build:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.*.props', '**/Directory.*.targets') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: |
        dotnet test --no-build --configuration Release --verbosity normal --logger "trx;LogFileName=test-results.trx" --logger "console;verbosity=detailed" --collect:"XPlat Code Coverage" --results-directory ./TestResults -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
      continue-on-error: true
      shell: bash

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}
        path: |
          ./TestResults/**/*.trx
          ./TestResults/**/*.xml
        retention-days: 7

    - name: Upload coverage reports
      if: always() && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: ./TestResults/**/coverage.cobertura.xml
        retention-days: 7

  # ================================================================
  # CODE QUALITY
  # ================================================================
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build
    if: success() || failure()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Run code analysis
      run: dotnet build --no-restore --configuration Release -p:EnforceCodeStyleInBuild=true -p:AnalysisLevel=latest
      continue-on-error: true

    - name: Download coverage reports
      uses: actions/download-artifact@v5
      with:
        name: coverage-reports
        path: ./coverage
      continue-on-error: true

    - name: Upload coverage to Codecov
      if: hashFiles('./coverage/**/*.xml') != ''
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        flags: unittests
        name: DotCompute
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # ================================================================
  # PACKAGE CREATION
  # ================================================================
  package:
    name: Create NuGet Packages
    runs-on: ubuntu-latest
    needs: build
    if: success() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
        else
          VERSION="0.1.0-alpha.${{ github.run_number }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Pack NuGet packages
      run: dotnet pack --configuration Release --output ./artifacts/packages -p:PackageVersion=${{ steps.version.outputs.version }} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts/packages
        retention-days: 30

  # ================================================================
  # RELEASE
  # ================================================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, package]
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download packages
      uses: actions/download-artifact@v5
      with:
        name: nuget-packages
        path: ./packages

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./packages/*.nupkg
        generate_release_notes: true
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Push to NuGet.org
      if: vars.PUBLISH_TO_NUGET == 'true'
      run: dotnet nuget push "./packages/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      continue-on-error: true