name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  CI: true

jobs:
  build:
    name: Build & Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        configuration: [Debug, Release]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          9.0.x
        dotnet-quality: preview
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore /p:TreatWarningsAsErrors=false --verbosity minimal
    
    - name: Test
      run: dotnet test --configuration ${{ matrix.configuration }} --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
    
    - name: Upload coverage to Codecov
      if: matrix.configuration == 'Release' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage
        fail_ci_if_error: true
        verbose: true

  aot-validation:
    name: Native AOT Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        dotnet-quality: preview
    
    - name: Restore
      run: dotnet restore
    
    - name: Publish AOT
      run: |
        cd samples/GettingStarted
        dotnet publish -c Release -r linux-x64 --self-contained /p:PublishAot=true --verbosity minimal
    
    - name: Verify AOT Binary
      run: |
        cd artifacts/bin/GettingStarted/Release/net9.0/linux-x64/publish
        ls -la
        ./GettingStarted --version
        file GettingStarted | grep -q "ELF 64-bit"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        dotnet-quality: preview
    
    - name: Restore
      run: dotnet restore
    
    - name: Format check
      run: |
        dotnet format --verify-no-changes --verbosity diagnostic

  package:
    name: Create NuGet Packages
    runs-on: ubuntu-latest
    needs: [build, aot-validation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        dotnet-quality: preview
    
    - name: Pack
      run: |
        dotnet pack -c Release --output ./artifacts /p:ContinuousIntegrationBuild=true
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts/*.nupkg
        retention-days: 7