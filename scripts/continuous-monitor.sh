#!/bin/bash
# Continuous monitoring master script
# Runs all validation checks and reports status

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPORT_DIR="/tmp/dotcompute-monitoring"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)

mkdir -p "$REPORT_DIR"

echo "================================================"
echo "DotCompute Continuous Monitoring"
echo "================================================"
echo "Timestamp: $(date)"
echo ""

# Phase 1: Build Status Check
echo "Phase 1: Build Status Check"
echo "------------------------------------------------"

"$SCRIPT_DIR/test-monitor.sh" > "$REPORT_DIR/build-$TIMESTAMP.txt" 2>&1
BUILD_EXIT=$?

if [ $BUILD_EXIT -eq 0 ]; then
    echo "✅ Build monitoring complete"
else
    echo "⚠️  Build has errors (expected during housekeeping)"
fi

echo ""

# Phase 2: Type Consolidation Validation
echo "Phase 2: Type Consolidation Validation"
echo "------------------------------------------------"

"$SCRIPT_DIR/validate-types.sh" > "$REPORT_DIR/types-$TIMESTAMP.txt" 2>&1
TYPES_EXIT=$?

if [ $TYPES_EXIT -eq 0 ]; then
    echo "✅ All types consolidated"
else
    DUPLICATE_COUNT=$(grep "Found .* types with duplicates" "$REPORT_DIR/types-$TIMESTAMP.txt" | grep -o '[0-9]*' | head -1)
    echo "⚠️  Found $DUPLICATE_COUNT types with duplicates"
fi

echo ""

# Phase 3: Regression Detection
echo "Phase 3: Regression Detection"
echo "------------------------------------------------"

"$SCRIPT_DIR/detect-regressions.sh" > "$REPORT_DIR/regression-$TIMESTAMP.txt" 2>&1
REGRESSION_EXIT=$?

if [ $REGRESSION_EXIT -eq 0 ]; then
    echo "✅ No regressions detected"
else
    echo "🚨 Regressions detected - review required"
fi

echo ""

# Phase 4: Test Execution (only if build succeeds)
echo "Phase 4: Test Execution Status"
echo "------------------------------------------------"

CS_ERRORS=$(dotnet build DotCompute.sln --configuration Release 2>&1 | grep -c "error CS" || echo 999)

if [ "$CS_ERRORS" -eq 0 ]; then
    echo "Build successful, running tests..."
    "$SCRIPT_DIR/run-tests.sh" > "$REPORT_DIR/tests-$TIMESTAMP.txt" 2>&1
    TEST_EXIT=$?

    if [ $TEST_EXIT -eq 0 ]; then
        echo "✅ All tests passed"
    else
        echo "❌ Some tests failed"
    fi
else
    echo "⏸️  Tests skipped ($CS_ERRORS CS errors remaining)"
fi

echo ""

# Generate Summary Report
echo "================================================"
echo "Monitoring Summary"
echo "================================================"

CURRENT_CS=$(grep "CS Errors:" "$REPORT_DIR/build-$TIMESTAMP.txt" | grep -o '[0-9]*' | head -1 || echo "N/A")
CURRENT_TOTAL=$(grep "Total:" "$REPORT_DIR/build-$TIMESTAMP.txt" | grep -o '[0-9]*' | head -1 || echo "N/A")

cat > "$REPORT_DIR/summary-$TIMESTAMP.md" <<EOF
# DotCompute Monitoring Summary
**Timestamp**: $(date)

## Status Overview

| Check | Status | Details |
|-------|--------|---------|
| Build Status | $([ $BUILD_EXIT -eq 0 ] && echo "✅ OK" || echo "⚠️ Errors") | $CURRENT_CS CS errors, $CURRENT_TOTAL total |
| Type Validation | $([ $TYPES_EXIT -eq 0 ] && echo "✅ OK" || echo "⚠️ Duplicates") | $([ $TYPES_EXIT -eq 0 ] && echo "No duplicates" || echo "$DUPLICATE_COUNT types need consolidation") |
| Regression Check | $([ $REGRESSION_EXIT -eq 0 ] && echo "✅ OK" || echo "🚨 Detected") | Review regression report |
| Unit Tests | $([ "$CS_ERRORS" -eq 0 ] && echo "✅ Ready" || echo "⏸️ Blocked") | $([ "$CS_ERRORS" -eq 0 ] && echo "Tests executable" || echo "$CS_ERRORS CS errors block testing") |

## Detailed Reports

- Build: \`$REPORT_DIR/build-$TIMESTAMP.txt\`
- Types: \`$REPORT_DIR/types-$TIMESTAMP.txt\`
- Regression: \`$REPORT_DIR/regression-$TIMESTAMP.txt\`
$([ "$CS_ERRORS" -eq 0 ] && echo "- Tests: \`$REPORT_DIR/tests-$TIMESTAMP.txt\`")

## Next Actions

$([ $TYPES_EXIT -ne 0 ] && echo "1. Consolidate $DUPLICATE_COUNT duplicate types")
$([ $REGRESSION_EXIT -ne 0 ] && echo "2. Address detected regressions")
$([ "$CS_ERRORS" -gt 0 ] && echo "3. Fix $CS_ERRORS remaining CS errors to enable testing")
$([ "$CS_ERRORS" -eq 0 ] && [ $TEST_EXIT -ne 0 ] && echo "4. Fix failing unit tests")

---
*Generated by continuous-monitor.sh*
EOF

echo ""
cat "$REPORT_DIR/summary-$TIMESTAMP.md"
echo ""

# Store in memory
npx claude-flow@alpha hooks post-edit \
    --memory-key "hive/testing/monitoring-summary-$TIMESTAMP" \
    --file "$REPORT_DIR/summary-$TIMESTAMP.md"

# Final notification
if [ $TYPES_EXIT -eq 0 ] && [ $REGRESSION_EXIT -eq 0 ] && [ "$CS_ERRORS" -eq 0 ]; then
    npx claude-flow@alpha hooks notify --message "✅ CLEAN BILL OF HEALTH: All checks passed, ready for testing"
    exit 0
else
    npx claude-flow@alpha hooks notify --message "⚙️ HOUSEKEEPING IN PROGRESS: $([ $TYPES_EXIT -ne 0 ] && echo "$DUPLICATE_COUNT type duplicates, ")$CURRENT_CS CS errors"
    exit 1
fi
