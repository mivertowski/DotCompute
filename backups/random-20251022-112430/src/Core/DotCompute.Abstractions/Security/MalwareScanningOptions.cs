// Copyright (c) 2025 Michael Ivertowski
// Licensed under the MIT License. See LICENSE file in the project root for license information.

namespace DotCompute.Abstractions.Security;

/// <summary>
/// Canonical configuration options for malware scanning services.
/// This is the single source of truth for malware scanning configuration across DotCompute.
/// </summary>
public sealed class MalwareScanningOptions
{
    /// <summary>
    /// Gets or initializes whether Windows Defender integration is enabled for scanning.
    /// </summary>
    /// <value>True to use Windows Defender on Windows platforms; otherwise, false.</value>
    /// <remarks>
    /// This option only applies on Windows platforms. On other platforms, this setting is ignored.
    /// </remarks>
    public bool EnableWindowsDefender { get; init; } = true;

    /// <summary>
    /// Gets or initializes the maximum number of concurrent malware scans.
    /// </summary>
    /// <value>The maximum concurrent scan limit (1-10). Default is 3.</value>
    /// <remarks>
    /// Higher values may improve throughput but increase CPU and I/O load.
    /// Recommended: 2-4 for typical workloads.
    /// </remarks>
    public int MaxConcurrentScans { get; init; } = 3;

    /// <summary>
    /// Gets or initializes the timeout duration for individual scan operations.
    /// </summary>
    /// <value>The timeout duration. Default is 2 minutes.</value>
    /// <remarks>
    /// Scans that exceed this timeout will be terminated and treated as scan failures.
    /// Large assemblies may require longer timeouts.
    /// </remarks>
    public TimeSpan ScanTimeout { get; init; } = TimeSpan.FromMinutes(2);

    /// <summary>
    /// Gets or initializes the path to an external antivirus scanner executable.
    /// </summary>
    /// <value>The full path to the external scanner, or null to disable external scanning.</value>
    /// <remarks>
    /// External scanners must support command-line invocation and return exit code 0 for clean files.
    /// Example: "/usr/bin/clamdscan" for ClamAV on Linux.
    /// </remarks>
    public string? ExternalScannerPath { get; init; }

    /// <summary>
    /// Gets or initializes the command-line arguments for the external scanner.
    /// </summary>
    /// <value>The arguments string. Default is "--scan".</value>
    /// <remarks>
    /// The file path will be automatically appended to these arguments.
    /// Example: "--scan --remove=no" for ClamAV.
    /// </remarks>
    public string ExternalScannerArgs { get; init; } = "--scan";

    /// <summary>
    /// Gets or initializes the path to the malware hash database file.
    /// </summary>
    /// <value>The full path to a text file containing known malware SHA-256 hashes, or null to use defaults.</value>
    /// <remarks>
    /// The file should contain one SHA-256 hash per line. Lines starting with '#' are treated as comments.
    /// If not specified, a minimal default hash database will be used.
    /// </remarks>
    public string? MalwareHashDatabasePath { get; init; }

    /// <summary>
    /// Gets or initializes the threshold for triggering suspicious pattern detection.
    /// </summary>
    /// <value>The number of suspicious patterns that trigger a threat detection (1-100). Default is 5.</value>
    /// <remarks>
    /// Files containing more than this many suspicious strings or patterns will be flagged.
    /// Higher values reduce false positives but may miss threats.
    /// </remarks>
    public int SuspiciousPatternThreshold { get; init; } = 5;

    /// <summary>
    /// Gets or initializes the behavioral analysis risk threshold.
    /// </summary>
    /// <value>The risk score threshold that triggers a threat detection (0-100). Default is 30.</value>
    /// <remarks>
    /// Behavioral analysis assigns risk scores based on file characteristics:
    /// - 0-29: Clean or low risk
    /// - 30-49: Medium risk (suspicious)
    /// - 50+: High risk (likely malware)
    /// </remarks>
    public int BehavioralRiskThreshold { get; init; } = 30;

    /// <summary>
    /// Gets the list of suspicious string patterns to detect during scanning.
    /// </summary>
    /// <value>A mutable list of case-insensitive patterns.</value>
    /// <remarks>
    /// These patterns are searched for in assembly content. Each match increments the suspicious pattern count.
    /// Default patterns include common malware indicators and dangerous API calls.
    /// </remarks>
    public IList<string> SuspiciousPatterns { get; init; } = new List<string>
    {
        // Windows API calls commonly abused by malware
        "CreateProcess",
        "WriteFile",
        "RegOpenKey",
        "VirtualAlloc",
        "LoadLibrary",
        "GetProcAddress",

        // Generic malware terminology
        "shellcode",
        "payload",
        "backdoor",
        "trojan",
        "keylogger",
        "rootkit",
        "ransomware",
        "cryptolocker",

        // Obfuscation indicators
        "eval(",
        "base64_decode",
        "gzinflate",
        "str_rot13"
    };
}
