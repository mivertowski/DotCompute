// Copyright (c) 2025 Michael Ivertowski
// Licensed under the MIT License. See LICENSE file in the project root for license information.

using System.ComponentModel.DataAnnotations;

namespace DotCompute.Algorithms.Types.Security;

/// <summary>
/// Represents the result of a malware scan operation.
/// </summary>
public sealed class MalwareScanResult
{
    /// <summary>
    /// Gets or sets a value indicating whether the scan completed successfully.
    /// </summary>
    public bool IsSuccess { get; init; }

    /// <summary>
    /// Gets or sets a value indicating whether malware was detected.
    /// </summary>
    public bool IsMalwareDetected { get; init; }

    /// <summary>
    /// Gets or sets the confidence score of the scan result (0.0 to 1.0).
    /// </summary>
    public double ConfidenceScore { get; init; }

    /// <summary>
    /// Gets or sets the list of detected threats.
    /// </summary>
    public IReadOnlyList<DetectedThreat> DetectedThreats { get; init; } = [];

    /// <summary>
    /// Gets or sets any warnings generated during the scan.
    /// </summary>
    public IReadOnlyList<string> Warnings { get; init; } = [];

    /// <summary>
    /// Gets or sets any errors that occurred during the scan.
    /// </summary>
    public IReadOnlyList<string> Errors { get; init; } = [];

    /// <summary>
    /// Gets or sets the scan duration.
    /// </summary>
    public TimeSpan ScanDuration { get; init; }

    /// <summary>
    /// Gets or sets the scan timestamp.
    /// </summary>
    public DateTime ScanTimestamp { get; init; } = DateTime.UtcNow;

    /// <summary>
    /// Gets or sets additional metadata from the scan.
    /// </summary>
    public IReadOnlyDictionary<string, object> Metadata { get; init; } = new Dictionary<string, object>();

    /// <summary>
    /// Gets or sets the detected patterns during pattern-based scanning.
    /// </summary>
    public IReadOnlyList<string> DetectedPatterns { get; init; } = [];

    /// <summary>
    /// Gets or sets the behavioral analysis flags.
    /// </summary>
    public IReadOnlyList<string> BehavioralFlags { get; init; } = [];

    /// <summary>
    /// Gets or sets the file hash computed during scanning.
    /// </summary>
    public string? FileHash { get; init; }

    /// <summary>
    /// Gets or sets the scan methods used during the operation.
    /// </summary>
    public IReadOnlyList<string> ScanMethods { get; init; } = [];
}

/// <summary>
/// Represents a detected threat from malware scanning.
/// </summary>
public sealed class DetectedThreat
{
    /// <summary>
    /// Gets or sets the threat name or identifier.
    /// </summary>
    public required string Name { get; init; }

    /// <summary>
    /// Gets or sets the threat category.
    /// </summary>
    public required string Category { get; init; }

    /// <summary>
    /// Gets or sets the severity level of the threat.
    /// </summary>
    public ThreatSeverity Severity { get; init; }

    /// <summary>
    /// Gets or sets a description of the threat.
    /// </summary>
    public string Description { get; init; } = string.Empty;

    /// <summary>
    /// Gets or sets the location where the threat was found.
    /// </summary>
    public string Location { get; init; } = string.Empty;

    /// <summary>
    /// Gets or sets the confidence score for this detection (0.0 to 1.0).
    /// </summary>
    [Range(0.0, 1.0)]
    public double ConfidenceScore { get; init; }

    /// <summary>
    /// Gets or sets additional metadata specific to this threat.
    /// </summary>
    public IReadOnlyDictionary<string, object> ThreatMetadata { get; init; } = new Dictionary<string, object>();
}

/// <summary>
/// Represents the severity level of a detected threat.
/// </summary>
public enum ThreatSeverity
{
    /// <summary>
    /// Low severity threat.
    /// </summary>
    Low,

    /// <summary>
    /// Medium severity threat.
    /// </summary>
    Medium,

    /// <summary>
    /// High severity threat.
    /// </summary>
    High,

    /// <summary>
    /// Critical severity threat.
    /// </summary>
    Critical
}