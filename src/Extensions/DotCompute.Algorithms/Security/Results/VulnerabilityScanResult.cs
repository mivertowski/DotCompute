// Copyright (c) 2025 Michael Ivertowski
// Licensed under the MIT License. See LICENSE file in the project root for license information.

using DotCompute.Algorithms.Security.Vulnerabilities;

namespace DotCompute.Algorithms.Security.Results;

/// <summary>
/// Contains comprehensive results from a vulnerability scan operation.
/// Provides detailed information about found vulnerabilities, risk assessment, and data sources.
/// </summary>
public sealed class VulnerabilityScanResult
{
    /// <summary>
    /// Gets or sets the package identifier that was scanned.
    /// Identifies which package this scan result applies to.
    /// </summary>
    /// <value>The package identifier as a string.</value>
    public required string PackageId { get; set; }

    /// <summary>
    /// Gets or sets the package version that was scanned.
    /// Identifies the specific version of the package that was analyzed.
    /// </summary>
    /// <value>The package version as a string.</value>
    public required string PackageVersion { get; set; }

    /// <summary>
    /// Gets or sets the timestamp when the scan was performed.
    /// Indicates the freshness of the vulnerability data.
    /// </summary>
    /// <value>The scan time as a DateTime.</value>
    public DateTime ScanTime { get; set; }

    /// <summary>
    /// Gets or sets whether the result was retrieved from cache.
    /// Indicates if this is fresh scan data or previously cached results.
    /// </summary>
    /// <value>true if the result came from cache; otherwise, false.</value>
    public bool FromCache { get; set; }

    /// <summary>
    /// Gets or sets whether the package has any known vulnerabilities.
    /// Provides a quick assessment of the package's security status.
    /// </summary>
    /// <value>true if vulnerabilities were found; otherwise, false.</value>
    public bool HasVulnerabilities { get; set; }

    /// <summary>
    /// Gets or sets the complete list of vulnerabilities found for this package.
    /// Contains detailed information about each security issue identified.
    /// </summary>
    /// <value>A list of package vulnerability objects.</value>
    public List<PackageVulnerability> Vulnerabilities { get; set; } = [];

    /// <summary>
    /// Gets or sets the total number of vulnerabilities found.
    /// Provides a summary count of all security issues identified.
    /// </summary>
    /// <value>The total vulnerability count as an integer.</value>
    public int VulnerabilityCount { get; set; }

    /// <summary>
    /// Gets or sets the number of critical severity vulnerabilities.
    /// Critical vulnerabilities pose the highest risk and should be addressed immediately.
    /// </summary>
    /// <value>The critical vulnerability count as an integer.</value>
    public int CriticalCount { get; set; }

    /// <summary>
    /// Gets or sets the number of high severity vulnerabilities.
    /// High severity vulnerabilities pose significant risk and should be addressed quickly.
    /// </summary>
    /// <value>The high vulnerability count as an integer.</value>
    public int HighCount { get; set; }

    /// <summary>
    /// Gets or sets the number of medium severity vulnerabilities.
    /// Medium severity vulnerabilities should be addressed during regular maintenance.
    /// </summary>
    /// <value>The medium vulnerability count as an integer.</value>
    public int MediumCount { get; set; }

    /// <summary>
    /// Gets or sets the number of low severity vulnerabilities.
    /// Low severity vulnerabilities have minimal impact but should still be monitored.
    /// </summary>
    /// <value>The low vulnerability count as an integer.</value>
    public int LowCount { get; set; }

    /// <summary>
    /// Gets or sets the calculated risk score for the package.
    /// Higher scores indicate greater security risk based on vulnerability count and severity.
    /// Score calculation: (critical * 10) + (high * 5) + (medium * 2) + low
    /// </summary>
    /// <value>The risk score as an integer.</value>
    public int RiskScore { get; set; }

    /// <summary>
    /// Gets or sets the list of vulnerability sources that were consulted.
    /// Indicates which databases and services were used for the scan.
    /// </summary>
    /// <value>A list of vulnerability source names.</value>
    public List<string> Sources { get; set; } = [];
}