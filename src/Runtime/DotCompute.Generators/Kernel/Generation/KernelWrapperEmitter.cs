// Copyright (c) 2025 Michael Ivertowski
// Licensed under the MIT License. See LICENSE file in the project root for license information.

using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;
using DotCompute.Generators.Models.Kernel;

namespace DotCompute.Generators.Kernel.Generation;

/// <summary>
/// Generates unified wrapper classes for kernel methods.
/// </summary>
public sealed class KernelWrapperEmitter
{
    /// <summary>
    /// Generates a unified wrapper class for cross-backend execution.
    /// </summary>
    /// <param name="method">The kernel method to generate a wrapper for.</param>
    /// <param name="compilation">The compilation context.</param>
    /// <returns>The generated wrapper source code.</returns>
    public static string GenerateUnifiedWrapper(KernelMethodInfo method, Compilation compilation)
    {
        var source = new StringBuilder();
        source.AppendLine("// <auto-generated/>");
        source.AppendLine("using System;");
        source.AppendLine("using System.Threading.Tasks;");
        source.AppendLine();

        var namespaceName = $"{method.Namespace}.Generated";
        source.AppendLine($"namespace {namespaceName}");
        source.AppendLine("{");
        source.AppendLine($"    public static class {method.Name}Wrapper");
        source.AppendLine("    {");
        source.AppendLine("        // Wrapper implementation placeholder");
        source.AppendLine("    }");
        source.AppendLine("}");

        return source.ToString();
    }

    /// <summary>
    /// Generates a kernel invoker class for dynamic execution.
    /// </summary>
    /// <param name="kernelClass">The kernel class to generate an invoker for.</param>
    /// <param name="allMethods">All kernel methods for lookup.</param>
    /// <returns>The generated invoker source code.</returns>
    public static string GenerateKernelInvoker(KernelClassInfo kernelClass, List<KernelMethodInfo> allMethods)
    {
        var source = new StringBuilder();
        source.AppendLine("// <auto-generated/>");
        source.AppendLine("using System;");
        source.AppendLine();

        var namespaceName = $"{kernelClass.Namespace}.Generated";
        source.AppendLine($"namespace {namespaceName}");
        source.AppendLine("{");
        source.AppendLine($"    public static class {kernelClass.Name}Invoker");
        source.AppendLine("    {");
        source.AppendLine("        // Invoker implementation placeholder");
        source.AppendLine("    }");
        source.AppendLine("}");

        return source.ToString();
    }
}